package com.example.tarea3;

import com.example.tarea3.Models.Usuario;
import com.example.tarea3.Models.Rol;
import com.example.tarea3.Repositories.UsuarioRepository;
import com.example.tarea3.Repositories.RolRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.BeforeEach;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.TestPropertySource;

import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@TestPropertySource(properties = {
    "spring.datasource.url=jdbc:postgresql://localhost:5432/basesita",
    "spring.datasource.username=postgres",
    "spring.datasource.password=root",
    "spring.jpa.hibernate.ddl-auto=none",
    "spring.sql.init.mode=never",
    "spring.main.banner-mode=off",
    "logging.level.org.springframework.boot.autoconfigure=WARN",
    "logging.level.org.springframework.security=WARN",
    "logging.level.org.hibernate=WARN"
})
public class Registro50Usuarios {

    @Autowired
    private UsuarioRepository usuarioRepository;
    
    @Autowired
    private RolRepository rolRepository;
    
    @Autowired
    private PasswordEncoder passwordEncoder;
    
    private final String[] nombres = {
        "Ana Garc√≠a", "Carlos Rodr√≠guez", "Mar√≠a L√≥pez", "Jos√© Mart√≠nez", "Laura S√°nchez",
        "David Gonz√°lez", "Elena Fern√°ndez", "Miguel P√©rez", "Carmen Ruiz", "Antonio Jim√©nez",
        "Isabel Moreno", "Francisco Mu√±oz", "Pilar √Ålvarez", "Juan Romero", "Cristina Guti√©rrez",
        "Manuel Navarro", "Rosa Torres", "Alberto Dom√≠nguez", "Patricia V√°zquez", "Roberto Ramos",
        "Marta Castillo", "Fernando Herrera", "Silvia Medina", "Andr√©s Guerrero", "Beatriz Cort√©s",
        "Ricardo Mendoza", "Nuria Iglesias", "Sergio Delgado", "Alicia Castro", "Javier Ortega",
        "M√≥nica Vargas", "Ra√∫l Campos", "Ver√≥nica Nieto", "√ìscar Cano", "Susana Prieto",
        "Iv√°n Cabrera", "Natalia Rubio", "Hugo Gallego", "Adriana Le√≥n", "Rub√©n M√°rquez",
        "Diana Herrero", "V√≠ctor Pe√±a", "Lorena Gil", "Emilio Santos", "Gema Aguilar",
        "Tom√°s Pascual", "Irene Calvo", "Marcos Vega", "Roc√≠o Morales", "Jaime Flores"
    };
    
    private final String[] dominios = {
        "gmail.com", "yahoo.es", "hotmail.com", "outlook.es", "universidad.edu",
        "investigacion.org", "ciencia.net", "academia.es", "tech.com", "research.org"
    };

    @BeforeEach
    void verificarRolesExisten() {
        Optional<Rol> rolUser = rolRepository.findByNombre("ROLE_USER");
        if (rolUser.isEmpty()) {
            Rol nuevoRol = new Rol();
            nuevoRol.setNombre("ROLE_USER");
            rolRepository.save(nuevoRol);
        }
    }

    @Test
    @DisplayName("üöÄ Registrar 50 usuarios normales")
    void testRegistrar50UsuariosNormales() {
        System.out.println("üöÄ REGISTRANDO 50 USUARIOS NORMALES");
        System.out.println("=".repeat(50));
        
        int usuariosRegistrados = 0;
        int usuariosExistentes = 0;
        
        for (int i = 0; i < 50; i++) {
            String nombre = nombres[i];
            String email = generarEmail(nombre, i);
            String password = "password123";
            
            try {
                if (usuarioRepository.existsByNombre(nombre)) {
                    usuariosExistentes++;
                    System.out.println("‚ö†Ô∏è  Usuario ya existe: " + nombre);
                    continue;
                }
                
                Usuario usuario = new Usuario();
                usuario.setNombre(nombre);
                usuario.setEmail(email);
                usuario.setPassword(passwordEncoder.encode(password));
                usuario.setDarkMode(i % 3 == 0);
                
                Rol rolUsuario = rolRepository.findByNombre("ROLE_USER")
                        .orElseThrow(() -> new RuntimeException("Rol ROLE_USER no encontrado"));
                usuario.setRoles(new HashSet<>(Collections.singletonList(rolUsuario)));
                
                Usuario usuarioGuardado = usuarioRepository.save(usuario);
                
                assertNotNull(usuarioGuardado.getId());
                assertEquals(nombre, usuarioGuardado.getNombre());
                assertEquals(email, usuarioGuardado.getEmail());
                
                usuariosRegistrados++;
                System.out.println("‚úÖ Usuario " + (i+1) + "/50: " + nombre + " (" + email + ")");
                
            } catch (Exception e) {
                System.err.println("‚ùå Error registrando usuario " + nombre + ": " + e.getMessage());
            }
        }
        
        System.out.println("\n" + "=".repeat(50));
        System.out.println("üìä RESUMEN:");
        System.out.println("‚úÖ Usuarios registrados: " + usuariosRegistrados);
        System.out.println("‚ö†Ô∏è  Usuarios existentes: " + usuariosExistentes);
        System.out.println("üìù Total usuarios en BD: " + usuarioRepository.count());
        System.out.println("üéâ ¬°REGISTRO COMPLETADO!");
        System.out.println("=".repeat(50));
    }
    
    private String generarEmail(String nombre, int indice) {
        String nombreLimpio = nombre.toLowerCase()
            .replace(" ", ".")
            .replace("√°", "a").replace("√©", "e").replace("√≠", "i")
            .replace("√≥", "o").replace("√∫", "u").replace("√±", "n");
        
        String dominio = dominios[indice % dominios.length];
        return nombreLimpio + indice + "@" + dominio;
    }
}